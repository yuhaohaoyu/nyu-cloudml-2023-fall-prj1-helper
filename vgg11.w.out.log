(p39_t21_trt21) haoyu@netsres118:~/NYU/2023-fall/examples/imagenet$ python ./main.py -a vgg11 -e data/imagenette2-160
=> creating model 'vgg11'
features.module.0.weight torch.Size([64, 3, 3, 3])
features.module.0.bias torch.Size([64])
features.module.3.weight torch.Size([128, 64, 3, 3])
features.module.3.bias torch.Size([128])
features.module.6.weight torch.Size([256, 128, 3, 3])
features.module.6.bias torch.Size([256])
features.module.8.weight torch.Size([256, 256, 3, 3])
features.module.8.bias torch.Size([256])
features.module.11.weight torch.Size([512, 256, 3, 3])
features.module.11.bias torch.Size([512])
features.module.13.weight torch.Size([512, 512, 3, 3])
features.module.13.bias torch.Size([512])
features.module.16.weight torch.Size([512, 512, 3, 3])
features.module.16.bias torch.Size([512])
features.module.18.weight torch.Size([512, 512, 3, 3])
features.module.18.bias torch.Size([512])
classifier.0.weight torch.Size([4096, 25088])
classifier.0.bias torch.Size([4096])
classifier.3.weight torch.Size([4096, 4096])
classifier.3.bias torch.Size([4096])
classifier.6.weight torch.Size([1000, 4096])
classifier.6.bias torch.Size([1000])
VE: model VGG(
  (features): DataParallel(
    (module): Sequential(
      (0): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): ReLU(inplace=True)
      (2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (3): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (4): ReLU(inplace=True)
      (5): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (6): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (7): ReLU(inplace=True)
      (8): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (9): ReLU(inplace=True)
      (10): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (11): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (12): ReLU(inplace=True)
      (13): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (14): ReLU(inplace=True)
      (15): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
      (16): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (17): ReLU(inplace=True)
      (18): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (19): ReLU(inplace=True)
      (20): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(7, 7))
  (classifier): Sequential(
    (0): Linear(in_features=25088, out_features=4096, bias=True)
    (1): ReLU(inplace=True)
    (2): Dropout(p=0.5, inplace=False)
    (3): Linear(in_features=4096, out_features=4096, bias=True)
    (4): ReLU(inplace=True)
    (5): Dropout(p=0.5, inplace=False)
    (6): Linear(in_features=4096, out_features=1000, bias=True)
  )
)
features.module.0: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 64, 224, 224])
features.module.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 64, 224, 224]) : torch.Size([256, 64, 224, 224])
features.module.2: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 64, 224, 224]) : torch.Size([256, 64, 112, 112])
features.module.3: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 64, 112, 112]) : torch.Size([256, 128, 112, 112])
features.module.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 128, 112, 112]) : torch.Size([256, 128, 112, 112])
features.module.5: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 128, 112, 112]) : torch.Size([256, 128, 56, 56])
features.module.6: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 128, 56, 56]) : torch.Size([256, 256, 56, 56])
features.module.7: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 56, 56]) : torch.Size([256, 256, 56, 56])
features.module.8: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 56, 56]) : torch.Size([256, 256, 56, 56])
features.module.9: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 256, 56, 56]) : torch.Size([256, 256, 56, 56])
features.module.10: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 256, 56, 56]) : torch.Size([256, 256, 28, 28])
features.module.11: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 256, 28, 28]) : torch.Size([256, 512, 28, 28])
features.module.12: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 28, 28]) : torch.Size([256, 512, 28, 28])
features.module.13: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 28, 28]) : torch.Size([256, 512, 28, 28])
features.module.14: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 28, 28]) : torch.Size([256, 512, 28, 28])
features.module.15: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 512, 28, 28]) : torch.Size([256, 512, 14, 14])
features.module.16: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 14, 14]) : torch.Size([256, 512, 14, 14])
features.module.17: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 14, 14]) : torch.Size([256, 512, 14, 14])
features.module.18: <class 'torch.nn.modules.conv.Conv2d'> : torch.Size([256, 512, 14, 14]) : torch.Size([256, 512, 14, 14])
features.module.19: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 512, 14, 14]) : torch.Size([256, 512, 14, 14])
features.module.20: <class 'torch.nn.modules.pooling.MaxPool2d'> : torch.Size([256, 512, 14, 14]) : torch.Size([256, 512, 7, 7])
features.module: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 512, 7, 7])
features: <class 'torch.nn.parallel.data_parallel.DataParallel'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 512, 7, 7])
avgpool: <class 'torch.nn.modules.pooling.AdaptiveAvgPool2d'> : torch.Size([256, 512, 7, 7]) : torch.Size([256, 512, 7, 7])
classifier.0: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 25088]) : torch.Size([256, 4096])
classifier.1: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.2: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.3: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.4: <class 'torch.nn.modules.activation.ReLU'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.5: <class 'torch.nn.modules.dropout.Dropout'> : torch.Size([256, 4096]) : torch.Size([256, 4096])
classifier.6: <class 'torch.nn.modules.linear.Linear'> : torch.Size([256, 4096]) : torch.Size([256, 1000])
classifier: <class 'torch.nn.modules.container.Sequential'> : torch.Size([256, 25088]) : torch.Size([256, 1000])
: <class 'torchvision.models.vgg.VGG'> : torch.Size([256, 3, 224, 224]) : torch.Size([256, 1000])
Test: [ 1/16]   Time  7.416 ( 7.416)    Loss 6.8526e+00 (6.8526e+00)    Acc@1   0.00 (  0.00)   Acc@5   0.00 (  0.00)
 *   Acc@1 0.000 Acc@5 0.000

